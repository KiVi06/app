
pipeline {
     agent {label 'Jenkins-Agent'}
     tools {
          jdk 'Java17'
           maven 'Maven3'
      }
      environment {
	    APP_NAME = "app-ci-pipeline"
            RELEASE = "24.0.5"
            DOCKER_USER = "kivi09"
            DOCKER_PASS = 'Kittu@123'
            IMAGE_NAME = "${DOCKER_USER}" + "/" + "${APP_NAME}"
            IMAGE_TAG = "${RELEASE}-${BUILD_NUMBER}"
       }   
                
      stages{
          stage ("Cleanup Workspace"){
                  steps {
                  cleanWs()
                  }
          }

          stage("Checkout from SCM"){
                  steps {
                  git branch: 'main', credentialsId: 'github', url: 'https://github.com/KiVi06/app.git'
                  }
          }

          stage("Build Application"){
               steps {
                    sh "mvn clean package"
               }
           }

           stage("Test Application"){
               steps {
                    sh "mvn test"
               }
           }

           stage("SonarQube Analysis"){
               steps {
                    script {
                         withSonarQubeEnv(credentialsId: 'jenkins-sonarqube-tocken') {
                         sh "mvn sonar:sonar"     
                           }
                     }
               }
          }

           stage ("Qulaity Gate") {
                 steps {
                   script {
                        waitForQualityGate abortPipline: false, credentialsId: 'jenkins-sonarqube-tocken'
                   }
               }

           }
           stage ("Build & Push Docker Image") {
                 steps { 
                    script {
                         docker.withRegistry('',DOCKER_PASS){
                             docker_image = docker.build "${IMAGE_NAME}"
                         }

                         docker.WithRegistry('',DOCKER_PASS) {
                             docker_image.push("${IMAGE_TAG}")
                             docker_image.push('latest') 
                          }
                      }
                   }
        }
     }
}
